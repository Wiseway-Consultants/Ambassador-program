openapi: 3.0.3
info:
  title: 'Save Fry Oil Ambassador API Documentation'
  version: 0.0.0
paths:
  /users/register/:
    post:
      operationId: Register a user
      description: Creating inactive user account and sending him the confirmation email
      tags:
        - User
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    example: Account created. Please check your email to confirm registration.
          description: ''


  /users/profile/:
    get:
      operationId: Retrieve user
      description: Depending on JWT token return user information
      tags:
        - User
      security:
        - jwtAuth: [ ]
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  email:
                    type: string
                    example: john@doe.com
                  first_name:
                    type: string
                    example: John
                  last_name:
                    type: string
                    example: Doe
                  contact_name:
                    type: string
                    example: Manager
                  restaurant_organisation_name:
                    type: string
                    example: KFC
                  comments:
                    type: string
                    example: Good guy
                  phone:
                    type: string
                  currency:
                    type: string
                    example: GBP
                  referral_code:
                    type: string
                    example: 11111-2222-3333-4444-55555555
          description: 'User data'
    put:
      operationId: Update user
      tags:
        - User
      security:
        - jwtAuth: [ ]
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                first_name:
                  type: string
                last_name:
                  type: string
                contact_name:
                  type: string
                  example: Manager
                restaurant_organisation_name:
                  type: string
                  example: KFC
                comments:
                  type: string
                  example: Good guy
                phone:
                  type: string
                currency:
                  type: string
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: 'Update Successfully'
        '400':
          content:
            application/json:
              schema:
                type: object
                properties:
                  email:
                    type: array
                    example: [ This field is required ]

          description: 'Errors'
    patch:
      operationId: Change password
      tags:
        - User
      security:
        - jwtAuth: [ ]
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                old_password:
                  type: string
                new_password:
                  type: string
              required:
                - old_password
                - new_password
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    example: Password updated successfully
          description: Password update successfully
        '400':
          content:
            application/json:
              schema:
                type: object
                properties:
                  new_password:
                    type: array
                    example: [ This password is too common., This password is entirely numeric. ]

          description: 'Errors'
  /users/auth/reset-password/send/:
    post:
      operationId: Reset password
      description: API sends a "reset password email" to provided email
      tags:
        - User
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: johndoe@gmail.com
              required:
                - email
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    example: Reset Email sent to user
          description: 'Reset email is successfully sent'
        '404':
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Such User doesn't exist
          description: "User with such email doesn't exist"
  /users/profile/qr_codes/:
    get:
      operationId: Retrieve user qrCode
      tags:
        - QR Codes
      security:
        - jwtAuth: [ ]
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QrCode'
          description: 'Retrieve user qrcode'
        '400':
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: No QR code found.
          description: "No QR code found."
    post:
      operationId: Create user qrCode
      tags:
        - QR Codes
      security:
        - jwtAuth: [ ]
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    example: success
          description: 'Successfully created referral qr code'
        '400':
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
          description: "Error"
  /users/token/obtain/:
    post:
      operationId: Retrieve token
      description: |-
        Takes a set of user credentials and returns an access and refresh JSON web
        token pair to prove the authentication of those credentials.
      tags:
        - JWT token
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  refresh:
                    type: string
                  access:
                    type: string
          description: ''
  /users/token/refresh/:
    post:
      operationId: Refresh token
      description: |-
        Takes a refresh type JSON web token and returns an access type JSON web
        token if the refresh token is valid.
      tags:
        - JWT token
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  access:
                    type: string
          description: ''
  /users/auth/confirm-email/:
    get:
      operationId: Confirm Email (with password)
      description: |-
        User gets an email with confirmation link. This link leads to this endpoint.
        if token is not corrupt or expired, user's account is set to active.
        Detail - user verify via GET method if password is already set and via post if they yet don't a password
      tags:
        - FYI endpoints
      responses:
        '200':
          description: No response body
    post:
      operationId: Confirm Email (no password)
      description: |-
        User gets an email with confirmation link. This link leads to this endpoint.
        if token is not corrupt or expired, user's password is saved and account is set to active.
        Detail - user verify via GET method if password is already set and via post if they yet don't a password
      tags:
        - FYI endpoints
      responses:
        '200':
          description: No response body
  /users/auth/resend-confirmation/:
    post:
      operationId: Resend Confirmation Email
      description: If confirm link expires, this endpoint will send a new confirmation email
      tags:
        - FYI endpoints
      security:
        - jwtAuth: [ ]
      responses:
        '200':
          description: No response body
  /users/auth/reset-password/:
    get:
      operationId: Password Reset
      description: Endpoint render different html templates based on token. If token is expired or corrupted
      tags:
        - FYI endpoints
      security:
        - jwtAuth: [ ]
      responses:
        '200':
          description: No response body
    post:
      operationId: Password Reset
      description: Endpoint receives token, new password and updates the user
      tags:
        - FYI endpoints
      security:
        - jwtAuth: [ ]
      responses:
        '200':
          description: No response body

components:
  schemas:
    TokenObtainPair:
      type: object
      properties:
        email:
          type: string
          writeOnly: true
        password:
          type: string
          writeOnly: true
      required:
        - email
        - password
    TokenRefresh:
      type: object
      properties:
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          writeOnly: true
      required:
        - access
        - refresh
    User:
      type: object
      properties:
        email:
          type: string
          format: email
          title: Email address
          description: The user's email address. Must be unique.
          maxLength: 254
        password:
          type: string
          writeOnly: true
          description: Not required field, if user was created without password,
            he can set password via confirmation email we sent
          maxLength: 128
        first_name:
          type: string
          description: The user's first name.
          maxLength: 30
        last_name:
          type: string
          description: The user's last name.
          maxLength: 30
        contact_name:
          type: string
          description: The preferred contact name.
        restaurant_organisation_name:
          type: string
          description: User's Restaurant or Organization name
        comments:
          type: string
        phone:
          type: string
          title: Phone number
          description: The user's phone number.
          maxLength: 30
        currency:
          type: string
          description: The preferred currency for the user's account.
          maxLength: 3
        is_accepted_terms:
          type: boolean
          description: Boolean indicating if the user has accepted the terms and conditions.
        referral_code:
          type: string
          writeOnly: true
          description: Optional referral code to link accounts.
      required:
        - email
        - phone
        - first_name
        - last_name
    QrCode:
      type: object
      properties:
        data:
          type: object
          properties:
            totalUniqueScan:
              type: integer
              example: 0
            scans:
              type: integer
              example: 0
            smediaActivity:
              type: array
              items: { }
              example: [ ]
            device:
              type: array
              items: { }
              example: [ ]
            city:
              type: array
              items: { }
              example: [ ]
            totalScanByDate:
              type: integer
              example: 0
            totalUniqueScanByDate:
              type: integer
              example: 0
            unique:
              type: array
              items: { }
              example: [ ]
            country:
              type: array
              items: { }
              example: [ ]
            data:
              type: array
              items: { }
              example: [ ]
            graph:
              type: array
              items: { }
              example: [ ]
            campaign:
              type: object
              properties:
                lock:
                  type: object
                  properties:
                    active:
                      type: boolean
                      example: false
                watchList:
                  type: object
                  properties:
                    isWatching:
                      type: boolean
                      example: false
                    date:
                      type: string
                      nullable: true
                      example: null
                gpsTrackData:
                  type: object
                  properties:
                    enabled:
                      type: boolean
                      example: false
                    trackNearQr:
                      type: boolean
                      example: false
                    radius:
                      type: integer
                      example: 1
                archive:
                  type: boolean
                  example: false
                members:
                  type: array
                  items: { }
                  example: [ ]
                bulk:
                  type: boolean
                  example: false
                scans:
                  type: integer
                  example: 0
                scanCounter:
                  type: integer
                  example: 0
                previousScan:
                  type: integer
                  example: 0
                todayScan:
                  type: integer
                  example: 0
                weekScans:
                  type: array
                  items: { }
                  example: [ ]
                previousWeekScans:
                  type: array
                  items: { }
                  example: [ ]
                scanLoop:
                  type: boolean
                  example: false
                expiryDate:
                  type: string
                  nullable: true
                  example: null
                expiryScans:
                  type: integer
                  nullable: true
                  example: null
                expireByIP:
                  type: boolean
                  example: false
                fileIds:
                  type: array
                  items: { }
                  nullable: true
                  example: null
                blocked:
                  type: boolean
                  example: false
                groupIds:
                  type: array
                  items: { }
                  example: [ ]
                _id:
                  type: string
                  example: "68d40960aca9313a13066022"
                qrId:
                  type: string
                  example: "TITS"
                qrType:
                  type: string
                  example: "qr2"
                qrCategory:
                  type: string
                  example: "url"
                shortUrl:
                  type: string
                  example: "https://qr.savefryoil.com/TITS"
                redirectUrl:
                  type: string
                  example: "https://savefryoil.com/ambassador-referrals/?refferal_id=4tits-62d6-441e-ass-4e2ef7e9657a"
                murlData:
                  type: array
                  items: { }
                  example: [ ]
                qrName:
                  type: string
                  example: "ambassadorTEST"
                qrImage:
                  type: string
                  example: "https://media.qrtiger.com/qr/ambassador_adminadmincom-tits.png"
                svgImage:
                  type: string
                  example: "https://media.qrtiger.com/svg/ambassador_adminadmincom-tits.svg"
                owner:
                  type: string
                  example: "68c07ba5f7tities3b42e8c4ef"
                subUserId:
                  type: string
                  nullable: true
                  example: null
                qrConfig:
                  type: string
                  example: '{"backgroundColor":null,"colorDark":"rgb(0,0,0)","colorType":"SINGLE_COLOR","gradientType":"linear","frameColor":"#054080","frameColor2":"#3a74c5","frameColorStyleType":"SINGLE_COLOR","frameGradientType":"linear","frameGradientStartColor":"#054080","frameGradientEndColor":"#f30505","frameText":"Scan me","eye_outer":"eyeOuter2","eye_inner":"eyeInner1","size":500,"qrData":"pattern0","transparentBkg":false,"logo":"https://media.qrtiger.com/images/2025/09/logo-(1)_82.png","color01":"rgb(0,0,0)"}'
                scanData:
                  type: array
                  items: { }
                  example: [ ]
                qrHistory:
                  type: array
                  items:
                    type: object
                    properties:
                      redirectUrl:
                        type: string
                      scans:
                        type: integer
                      uniqueScans:
                        type: integer
                      _id:
                        type: string
                      createdBy:
                        type: string
                      action:
                        type: string
                      date:
                        type: string
                createdAt:
                  type: string
                  example: "2025-09-24T15:08:16.675Z"
                updatedAt:
                  type: string
                  example: "2025-09-24T15:08:18.206Z"
                urlUpdatedAt:
                  type: string
                  example: "2025-09-24T15:08:16.676Z"
                __v:
                  type: integer
                  example: 3
                folderId:
                  type: string
                  example: "68cadd0titsd85a5f29b"
                id:
                  type: string
                  example: "68d40960ass13a13066024"
  securitySchemes:
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
